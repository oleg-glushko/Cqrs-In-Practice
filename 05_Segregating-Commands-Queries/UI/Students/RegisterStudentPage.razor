@page "/RegisterStudent"
@rendermode InteractiveAuto

@using CSharpFunctionalExtensions

@inject HttpClient Http
@inject NavigationManager NavManager
@inject IToastService toastService

<PageTitle>Register Student</PageTitle>
<BlazoredToasts />

@if (StudentModel == null)
{
    <p>Fetching data...</p>
} else
{
    <EditForm Model="StudentModel" class="row g-3">
        <div class="col-md-6">
            <label for="name" class="form-label">Name:</label>
            <InputText id="name" class="form-control" @bind-Value="StudentModel.Name" />
        </div>
        <div class="col-md-6 mb-2">
            <label for="email" class="form-label">Email:</label>
            <InputText id="email" class="form-control" @bind-Value="StudentModel.Email" />
        </div>
        <div class="col-md-6 mb-2">
            <label for="firstCourse" class="form-label">First course:</label>
            <InputSelect id="firstCourse" class="form-select" @bind-Value="StudentModel.Course1">
                @foreach (var course in DbStaticData.Courses)
                {
                    <option value="@course">@course</option>
                }
            </InputSelect>
        </div>
        <div class="col-md-6 mb-2">
            <label for="firstGrade" class="form-label">First course grade:</label>
            <InputSelect id="firstGrade" class="form-select" @bind-Value="StudentModel.Course1Grade">
                @foreach (var grade in DbStaticData.Grades)
                {
                    <option value="@grade">@grade</option>
                }
            </InputSelect>
        </div>
        <div class="col-md-6 mb-2">
            <label for="secondCourse" class="form-label">Second course:</label>
            <InputSelect id="secondCourse" class="form-select" @bind-Value="StudentModel.Course2">
                @foreach (var course in DbStaticData.Courses)
                {
                    <option value="@course">@course</option>
                }
            </InputSelect>
        </div>
        <div class="col-md-6 mb-2">
            <label for="secondGrade" class="form-label">Second course grade:</label>
            <InputSelect id="secondGrade" class="form-select" @bind-Value="StudentModel.Course2Grade">
                @foreach (var grade in DbStaticData.Grades)
                {
                    <option value="@grade">@grade</option>
                }
            </InputSelect>
        </div>

        <div class="d-flex justify-content-end gap-1">
            <button class="btn btn-outline-success" type="button" @onclick="Save">OK</button>
            <button class="btn btn-outline-secondary" type="button" @onclick="@(() => NavManager.NavigateTo("/"))">Cancel</button>
        </div>
    </EditForm>
}

@code {
    public NewStudentDto? StudentModel { get; set; }
    public string? ErrorMessage { get; set; }

    protected override void OnInitialized()
    {
        StudentModel = new() { Name = string.Empty, Email = string.Empty };
    }

    private async Task Save()
    {
        var result = await Http.RegisterStudent(StudentModel!);
        if (result.IsFailure)
        {
            toastService.ShowError(result.Error);
            return;
        }

        NavManager.NavigateTo("/");
    }
}
